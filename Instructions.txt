-- Implemented --

0000 0000 0000 0000 - nop : Não faz nada
1111 1111 1111 1111 - call : Chama função

0000 0001 aaaa bbbb - add : Soma
0000 0010 aaaa bbbb - sub : Subtração
0000 0011 aaaa bbbb - mul : Multiplicação
0000 0100 aaaa bbbb - div : Divisão

0000 0101 aaaa bbbb - LeftShift : << (Csharp)
0000 0110 aaaa bbbb - RightShift : >> (Csharp)
0000 1000 aaaa bbbb - and 
0000 0111 aaaa bbbb - or

0000 1001 aaaa xxxx- not : Não lógico (!)
0000 1010 aaaa bbbb - XOR
0000 1011 aaaa bbbb - NAND
0000 1100 aaaa xxxx- Increment : A+=1

0000 1101 aaaa xxxx- Decrement : A-=1
0000 1110 aaaa xxxx- Neg : A * -1

-- Not implemented -- 

0000 1110 aaaa bbbb - moveConst
0000 1111 aaaa bbbb - const
0001 0000 aaaa bbbb - push
0001 0001 aaaa xxxx - pop

0001 0010 aaaa bbbb - cmp
0001 0011 aaaa bbbb - je
0001 0100 aaaa bbbb - jnp
0001 0101 aaaa bbbb - ig

0001 0110 aaaa bbbb - jge
0001 0111 aaaa bbbb - ree



0011 0001 1111 1111	0001 1011 0000 0000
0100 0000 0000 0001	1001 0000 0000 0101
1000 0000 0000 0001	1000 0000 0000 0101
0000 0000 0000 0000	0000 0000 0000 0000 







descrições:
aaaa = endereço de um registrador A
bbbb = endereço de um registrador B
xxxx = tanto faz, será ignorado
cccc cccc = constante C de 8 bits
llll llll llll = label L usada para saltos no código de 12 bits

inst	opcode			descrição			Implementada
nop	0000 xxxx xxxx xxxx	Não faz nada.			[OK]

add	0001 0000 aaaa bbbb	A = A + B			[OK]
sub	0001 0001 aaaa bbbb	A = A - B			[OK]
imul	0001 0010 aaaa bbbb	A = A * B			[OK]
idiv	0001 0011 aaaa bbbb	A = A / B			[OK]
shl	0001 0100 aaaa bbbb	A = A << B			[OK]
shr	0001 0101 aaaa bbbb	A = A >> B			[OK]
neg	0001 0110 aaaa xxxx	A = -A				[OK]
and	0001 0111 aaaa bbbb	A = A & B			[OK]
or	0001 1000 aaaa bbbb	A = A | B			[OK]
not	0001 1001 aaaa xxxx	A = !A				[OK]
xor	0001 1010 aaaa bbbb	A = A ^ B			[OK]
inc	0001 1011 aaaa xxxx	A = A + 1			[OK]
dec	0001 1100 aaaa xxxx	A = A - 1			[OK]

mov	0010 0000 aaaa bbbb	A = B				...
mov	0010 0001 aaaa [bbbb]	A = *B (load)			...
mov	0010 0010 [aaaa] bbbb	*A = B (store)			...
push 	0010 0011 aaaa xxxx	Coloca A na stack		...
pop	0010 0100 aaaa xxxx	Remove valor da stack para A	...
mov	0011 aaaa cccc cccc	A = C				[OK]

cmp	0100 xxxx aaaa bbbb	Compara A com B			...
cmp	0101 aaaa cccc cccc	Compara A com C			...

jump	1000 llll llll llll	Pula incondicionalmente		...
je	1001 llll llll llll	Pula quando igual		...
jne	1010 llll llll llll	Pula quando diferente		...
jg	1011 llll llll llll	Pula quando maior		...
jge	1100 llll llll llll	Pula quando maior ou igual	...
jz	1101 llll llll llll	Pula se o ultimo valor foi zero	...

call	1110 llll llll llll	Chama uma função		...
ret	1111 1111 1111 1111	Retorna da função		...


0011 0001 1111 1111 - mov: reg1 = 255
0001 1011 0000 0000 - inc: reg0 += 1
0100 0000 0000 0001 - cmp: reg0 == reg1
1001 0000 0000 0101 - je: jump if reg0 == reg1 to line 5
1000 0000 0000 0001 - jump to line 1
1000 0000 0000 0101 - jump to line 5
0000 0000 0000 0000 nop
0000 0000 0000 0000 nop


 


